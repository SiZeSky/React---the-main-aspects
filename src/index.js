/*
----------------------------------Что такое хуки?------------------------------------
Хуки - это специальная технология, что позволяет выполнить перехват функции в чужих процессах
Простыми словами: за счет хук мы можем выполнять какие либо действия в автоматическом формате в зависимости от того, что было выполнено в другом каком то процессе
Похожая работа с состояниями
-----------------------------------Передача свойств----------------------------------
Button.defaultProps = {
    text: "Кнопка"
}
---------------------------------Хуки состояний--------------------------------------
Внутрь компонента Button мы хотим передать состояние.
Но вот проблема: мы умеем передавать состояния для классов, а для функций нет. Для этого как раз будем использовать хук useState.
Как его использовать? Создадим константу и присвоим ей этот хук (кстати, если мы используем вебхук, то его нужно также импортировать через запятую и фигурную скобку вместе с реактом: import React, { useState } from "react" в тот файл, где мы его используем)
    const click = useState(0) - в скобках добавляется значение поумолчанию, которое будет добавляться к самому этому состоянию. Сейчас просто добавим число "0", чтобы посмотреть, как оно выводится на консоль
    const click = useState(0)
    console.log(click)
Он нам выводит некий массив (два, потому что мы вызываем кнопку два раза) с нашим выведенным значением поумолчани и функцией, за счет которой мы и можем менять значение нашего состояния. Поэтому, через константу записать лучше две перменных:
const [click, setClick] = useState(0)
Первое значение - переменная, вторая функция, которая будет изменять состояние этого переменного (обычно ее называют setИ_название_левой_переменной)
Теперь как будем использовать:
<button onClick={() => setClick(click + 1)}>{props.text} {click}</button>
Сделаем обработчик, который при нажатии будет вызывать нашу функцию, которая будет при каждом нажатии на кнопку увеличивать нашу константу на 1 (click++ для константы не подойдет)
----------------------------------Хук UseEffect---------------------------------------
За счет этого метода мы можем выполнять код, который будет срабатывать автоматически при изменении каких либо состояний
----------------------------Метод "componentDidUpdate"--------------------------------
Подходит для работы с классами, например, если мы работаем с useEffect и хотим его применить к классам, можно задействовать componentDidUpdate - благодаря этому вебхуку можно применять автоматический процесс после изменения состояния (Применили к классу App)
*/
import React from "react"
import * as ReactDOMClient from 'react-dom/client';
import App from './App'
import './css/main.css'

const app = ReactDOMClient.createRoot(document.getElementById("app"))

app.render(<App />)
