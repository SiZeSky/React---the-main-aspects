/*
-----------------------------------Что такое компоненты?-----------------------------
За счет компонентов мы можем писать любой блок нашего сайта. В качестве блока может быть все, что угодно: это может быть просто одна определенная кнопка, некая секция в шапке и тд.
Компонент - это блок сайта, который может быть чем угодно, тобишь мы просто описываем какую-то часть сайта
--------------------------------Создание компонента----------------------------------
Для начала, создадим новую функцию
function App() {
    return (<div className="box">
        <h1>{helpText}</h1>
    <input placeholder={helpText} onClick={inputClick} onMouseEnter={mouseOver} />
    <p>{helpText === "Help text!" ? "Yes" : "No"}</p>
    </div>)
}
    Тобишь, в этой функции мы возвращаем (будем вытягивать из нее) объекты HTML и иные функции и условия, которые ранее были прописаны в const elements, поэтому данную константу можно удалить, а вместо этого теперь выводить через render уже нашу функцию:
app.render(<App />)
По факту это не функция, а именно, что ни есть, компонент, а именно - JSX.Element
Также, мы можем создавать сколько угодно компонентов (в зависимости от того, сколько мы хотим видеть блоков на сайте). О чем это говорит: Вот мы, например, создали футер со своей информацией и кнопкой. Но мы хотим, чтобы кнопка была отдельным компонентом и сделать ее таковой нам никто не помешает
--------------------------------Компонент Header-------------------------------------
function Header() {
    return (
        <header>Шапка сайта</header>
    )
}
 А теперь, как нам его вывести вместе с компонентом App?
Будем считать, что компонент App - родительский, соответственно, наш header можно прописать прямо в функции App:
 function App() {
 return (<div className="box">
     <Header />
     <h1>{helpText}</h1>
 <input placeholder={helpText} onClick={inputClick} onMouseEnter={mouseOver} />
 <p>{helpText === "Help text!" ? "Yes" : "No"}</p>
 </div>)
 }
Также мы теперь можем записывать функции в новом формате:
const Header = ()  => {
    return (
        <header>Шапка сайта</header>
    )
}
------------------------Класс для описания компонента--------------------------------
Однако, для написания компонентов чаще используют классы, нежели функции. Это по причине того, что внутри классов можно описывать другое множество различных функций, которые будут добавлять функционал к нашему основному компоненту, плюс внутри класса можно описывать различные переменные
Теперь же вместо функции Header, создадим вместо нее класс, причем этот наш класс будет все наследовать от определенного класса - родителя (это можно сделать путем применения метода extends, далее обращаемся к объекту-родителю React и через точку обращаемся к другому еще одному объекту .Components):
class Header extends React.Components {}
А далее, записываем уже внутри нашего класса функцию, причем она будет называться стандартным значением render (render это тоже по сути функция):
class Header extends React.Components {
render () {
    return (
        <header>Шапка сайта</header>
    )
}
}
То же самое сделаем и с App:
class App extends React.Component {
render () {
    return (<div className="box">
        <Header />
        <h1>{helpText}</h1>
    <input placeholder={helpText} onClick={inputClick} onMouseEnter={mouseOver} />
    <p>{helpText === "Help text!" ? "Yes" : "No"}</p>
    </div>)
}
}
И теперь можем заняться другими нашими переменными, которые вообще ни к чему не привязаны, добавив к классу App новые методы:
class App extends React.Component {
helpText = "Help text!"
render () {
    return (<div className="box">
        <Header />
        <h1>{this.helpText}</h1>
    <input placeholder={this.helpText} onClick={this.inputClick} onMouseEnter={this.mouseOver} />
    <p>{this.helpText === "Help text!" ? "Yes" : "No"}</p>
    </div>)
}

 inputClick () {console.log("Clicked")}
  mouseOver () {console.log("Mouse Over")}
}
  И так как мы перенесли в этот класс все глобальные переменные и функции сюда, по правилам, к ним в этом же классе нужно обращаться через .this (как пример:        <h1>{this.helpText}</h1>)
-----------------------------Передача свойств----------------------------------------
Внутрь самого компонента также можно передавать и различные свойства.
Допустим, создадим в классе App свойство для Header:
 <Header title="Шапка сайта"/>
 А теперь мы можем передать это свойство в сам класс Header, одновременно с этим его и выведем:
class Header extends React.Component {
render () {
    return (
        <header>{this.props.title}</header>
    )
}
}
Пропсываем this, обращаясь как бы к этому классу, далее props (это встроенная вещь, которая есть внутри каждого класса в React)
Это полезно тем, что мы можем обратиться к этому значению в классе App сколько угодно раз, причем с разными значениями:
        <Header title="Шапка сайта"/>
        <Header title="Шапка сайта!"/>
        <Header title="!!!"/>
И таким образом, все это выведется на экран в качестве разных строк
-----------------------------Разбитиие кода по файлам--------------------------------
Мы перенесли создание классов Header и App в другой файл. Теперь в этом мы попросту импортируем данные из файла App.js сюда и переносим в HTML документ с помощью:
import App from './App'
Так мы импортируем компонент App сюда (точка "." потому, что мы как бы говорим, что импортируем из этой же папки, а не из другого источника)
export default App
Это запись уже в App.js, которая как бы говорит, что мы из него экспортируем компонент как App
Также мы можем сделать и с Header, создав ему отдельный файл, так как для каждого компонента принято создавать новый файл
------------------------------Подключение файла со стилями---------------------------
В папке src создаем папку css, а в ней создадим файл main.css
Внутри создали стили:
*{
    margin: 0;
    padding: 0;
}

body {
    background-color: brown;
}

.header {
    background-color: #333;
    padding: 20px;
}
А теперь подключим их к нашему проекту, просто импортируем его к index.js:
import './css/main.css'
А как указать класс, что в css?
Не проблема:
<header className="header">{this.props.title}</header>
Это мы прописываем в файле Header.js
-------------------------------Подключение изображений-------------------------------
Также, как и импорт компонентов:
создаем папку, файл, далее в компонентах создаем файл Image.js и в качестве класса создаем сам компонент
*/

import React from "react"
import * as ReactDOMClient from 'react-dom/client';
import App from './App'
import './css/main.css'

const app = ReactDOMClient.createRoot(document.getElementById("app"))

app.render(<App />)

