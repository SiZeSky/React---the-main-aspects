--------------------------------Компонент User----------------------------------------
React JS такая технология, где лучше всего каждый блок кода разбивать на компоненты. Не стоит все писать в одном компоненте, поэтому, из класса Users мы вытянем и сделаем отдельный компонент, как User, который будет как раз таки и создавать для каждого пользователя новый блок div, импортируя его в класс Users
----------------------------------Иконки React JS-------------------------------------
Если мы хотим вместо обычных кнопок в стиле тега button стилизованные иконки, нам нужно скачать дополнительную библиотеку, как react-icons. Чтобы ее сказать, используем терминал и пакетный менеджер npm. Вводим в терминал npm i react-icons, и теперь просто с помощью import импортируем в нужный нам документ. Если мы хотим узнать, какие иконки есть в react-icons, достаточно просто забить в браузере React Icons и зайти на официальный сайт React. Чтобы подключить иконку в документ, нужно прописать так:
import { Имя_иконки, Имя_иконки и тд } from "react-icons/io5(это путь, он может быть другим, именно конечная папка)"
-------------------------------------Создание формы-----------------------------------
Для формы создадим еще один компонент под названием AddUser, создадим саму форму:
class AddUser extends React.Component {
    render () {
        return (
            <form>

            <input placeholder="Firstname" />
            <input placeholder="Lastname" />
            <textarea placeholder="Biografic"> </textarea>
            <input placeholder="Age" />
            <label htmlFor="isHappy">You are Happy?</label>
            <input type="checkbox" id="isHappy" />
            <button type="button">Add</button>
            </form>
        )
    }
    }
    И импортируем ее в App
-----------------------------Получение данных от пользователя-------------------------
Для получения данных нужно в AddUser прописать конструктор состояния, который будет принимать на себя значения из формы. Сам конструктор:
    constructor(props) {
        super(props)
        this.state = {
            firstname: "",
            lastname: "",
            bio: "",
            age: 1,
            isHappy: false
        }
    }
И далее в форме для каждого поля нужно прописать обработчик событий onChange и принимать данные, которые пишет пользователь с помощью e.target.value (e - параметр нашей анонимной функции), единственное для checkbox прописать вместе value - checked. Пример:
onChange={(e) => this.setState({ firstname: e.target.value })}
-----------------------------------Логика приложения----------------------------------
Нас не совсем устраивает то, что у нас будут передаваться по логике из AddUser новые пользователи в Users, поэтому конструктор состояния из Users мы перенесем в App, а уже в нем будем принимать значение юзеров, только теперь у нас будут храниться параметры наших переменных в props, 
        if(this.props.users.length > 0)
        return (<div>
            {this.props.users.map((el) =>
                Соответственно, вместо state мы пишем props
-----------------------------------Передача данных в компонент App--------------------
addUser(user) {
    console.log(user)
}
Прописываем новый метод в App(пока будем просто выводить на консоль в качестве объекта), далее добавляем  метод в боковую панель:
        <aside>
            <AddUser onAdd={this.addUser} />
        </aside>
Далее этот метод добавляем для нашей кнопки в компоненте AddUser:
            <button type="button" onClick={() => this.props.onAdd({
                firstname: this.state.firstname,
                lastname: this.state.lastname,
                bio: this.state.bio,
                age: this.state.age,
                isHappy: this.state.isHappy,
            })}>Add</button>
------------------------------------Добавление пользователя---------------------------
Все сработало, теперь можем сделать это и не в качестве вывода на консоль. Для начала, разрешим нашему новому методу общаться с состояниями:
        this.addUser = this.addUser.bind(this) - прописываем в constructor в App
А теперь в наш новый метод прописываем следующее:
addUser(user) {
    const id = this.state.user.length + 1
    this.setState({ user:[...this.state.users, {id, ...user}] })
}
Создаем константу, которая будем при каждом изменении состояния увеличиваться на 1 в зависимости длины состояния user.
Далее устанавливаем состояние: у нас будет применяться и меняться состояние users (тот самый наш массив), квадратными скобками как бы открываем массив и говорим, что будем обращаться ко всему списку ...this.state.users имеем ввиду, что до этого что то было и что у нас сейчас происходит, и теперь мы после запятой как бы добавляем новый объект {id(наша переменная id, которая есть и в массиве и которая меняется и тут, так что с помощью ключа key это все будет обрабатываться нормально), ...user} а дальше три точки и user подразумевают другие данные, которые передаются сюда в качестве параметра.
Если проще: мы меняем список users, к текущему всему списку мы добавляем +1 новый объект, который состоит из id и к этому же id добавляется еще один объект user, который передается сюда в качестве параметра